{
	"info": {
		"_postman_id": "air-cargo-validation-tests",
		"name": "Air Cargo API - Validation & Error Tests",
		"description": "Testing validation, error handling, and edge cases",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "🚫 Authentication Errors",
			"item": [
				{
					"name": "Login - Invalid Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 401', () => pm.response.to.have.status(401));",
									"pm.test('Authentication Failed', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.error).to.eql('Authentication failed');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [{"key": "Content-Type", "value": "application/json"}],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"nonexistent@example.com\",\"password\":\"password123\"}"
						},
						"url": "{{baseUrl}}{{apiPrefix}}/auth/login"
					}
				},
				{
					"name": "Protected Route - No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 401', () => pm.response.to.have.status(401));",
									"pm.test('Access Denied', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.error).to.eql('Access denied');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"url": "{{baseUrl}}{{apiPrefix}}/auth/profile"
					}
				}
			]
		},
		{
			"name": "📊 Validation Errors",
			"item": [
				{
					"name": "Route Search - Invalid Airport Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 400', () => pm.response.to.have.status(400));",
									"pm.test('Validation Error', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.error).to.include('validation');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"url": {
							"raw": "{{baseUrl}}{{apiPrefix}}/routes?origin=INVALID&destination=BLR&departure_date={{testDepartureDate}}",
							"host": ["{{baseUrl}}"],
							"path": ["{{apiPrefix}}", "routes"],
							"query": [
								{"key": "origin", "value": "INVALID"},
								{"key": "destination", "value": "BLR"},
								{"key": "departure_date", "value": "{{testDepartureDate}}"}
							]
						}
					}
				},
				{
					"name": "Booking - Invalid Pieces Count",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Login first to get token",
									"pm.sendRequest({",
									"    url: pm.environment.get('baseUrl') + '/' + pm.environment.get('apiPrefix') + '/auth/login',",
									"    method: 'POST',",
									"    header: {'Content-Type': 'application/json'},",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            email: pm.environment.get('testEmail'),",
									"            password: pm.environment.get('testPassword')",
									"        })",
									"    }",
									"}, (err, res) => {",
									"    if (!err && res.json().data.token) {",
									"        pm.environment.set('authToken', res.json().data.token);",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 400', () => pm.response.to.have.status(400));",
									"pm.test('Validation Error', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.error).to.include('validation');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"},
							{"key": "Authorization", "value": "Bearer {{authToken}}"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"origin\":\"DEL\",\"destination\":\"BLR\",\"pieces\":0,\"weight_kg\":100,\"flight_ids\":[1]}"
						},
						"url": "{{baseUrl}}{{apiPrefix}}/bookings"
					}
				}
			]
		},
		{
			"name": "🔍 Not Found Errors",
			"item": [
				{
					"name": "Booking History - Invalid Ref ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 404', () => pm.response.to.have.status(404));",
									"pm.test('Booking Not Found', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.error).to.eql('Booking not found');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"url": "{{baseUrl}}{{apiPrefix}}/bookings/AC-99999999-9999/history"
					}
				},
				{
					"name": "Invalid Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 404', () => pm.response.to.have.status(404));",
									"pm.test('Route Not Found', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.error).to.eql('NOT_FOUND');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"url": "{{baseUrl}}{{apiPrefix}}/invalid-endpoint"
					}
				}
			]
		}
	]
}